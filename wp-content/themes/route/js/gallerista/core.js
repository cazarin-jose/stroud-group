// Generated by CoffeeScript 1.6.2
(function() {
  var define, require,
    _this = this,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require = this.require;

  define = this.define;

  if (!(define != null ? define.amd : void 0)) {
    require = function(mod) {
      return {
        jquery: _this.jQuery,
        underscore: _this._,
        backbone: _this.Backbone
      }[mod];
    };
    define = function() {
      var args, fn, _i, _ref;

      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
      return ((_ref = _this.gallerista) != null ? _ref : _this.gallerista = {}).core = fn(require);
    };
  }

  define(function(require) {
    var $, Backbone, GalleryModel, GallerySlides, HtmlSlideView, PhotoSlideView, SlideView, ViewState, _, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    GallerySlides = (function(_super) {
      __extends(GallerySlides, _super);

      function GallerySlides() {
        _ref = GallerySlides.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return GallerySlides;

    })(Backbone.Collection);
    GalleryModel = (function(_super) {
      __extends(GalleryModel, _super);

      function GalleryModel() {
        _ref1 = GalleryModel.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      GalleryModel.prototype.defaults = {
        selectedSlideIndex: 0,
        slides: new Backbone.Collection([])
      };

      GalleryModel.prototype.initialize = function(options) {
        this.set('slides', ($.isArray(options.slides) ? new GallerySlides(options.slides) : options.slides));
        return this._setSelectedSlide(this.get('selectedSlideIndex'));
      };

      GalleryModel.prototype.goto = function(index) {
        return this._setSelectedSlide(index);
      };

      GalleryModel.prototype._setSelectedSlide = function(slideOrIndex, silent) {
        var slide, slides;

        if (silent == null) {
          silent = false;
        }
        slides = this.get('slides');
        if (typeof slideOrIndex === 'number') {
          slide = slides.at(slideOrIndex);
        } else {
          slide = slideOrIndex;
        }
        if (this._selectedSlide) {
          this._selectedSlide.set('selected', false);
        }
        if (slide) {
          slide.set('selected', true);
        }
        this._selectedSlide = slide;
        return this.set({
          selectedSlide: slide,
          selectedSlideIndex: slides.indexOf(slide)
        }, {
          silent: silent
        });
      };

      GalleryModel.prototype.move = function(offset, wrap) {
        var newIndex, slideCount, slides;

        if (wrap == null) {
          wrap = true;
        }
        slides = this.get('slides');
        slideCount = slides.length;
        newIndex = this.get('selectedSlideIndex') + offset;
        if (wrap) {
          newIndex = (newIndex + slideCount) % slideCount;
        } else {
          newIndex = Math.max(0, Math.min(newIndex, slideCount));
        }
        return this.goto(newIndex);
      };

      GalleryModel.prototype.gotoNext = function(wrap) {
        return this.move(1, wrap);
      };

      GalleryModel.prototype.gotoPrevious = function(wrap) {
        return this.move(-1, wrap);
      };

      return GalleryModel;

    })(Backbone.Model);
    ViewState = (function(_super) {
      __extends(ViewState, _super);

      function ViewState() {
        _ref2 = ViewState.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      return ViewState;

    })(Backbone.Model);
    SlideView = (function(_super) {
      __extends(SlideView, _super);

      function SlideView() {
        _ref3 = SlideView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      SlideView.prototype.tagName = 'div';

      SlideView.prototype.initialize = function(options) {
        _.bindAll(this, '_changeSelectedHandler');
        this.viewState = options.viewState;
        this.viewState.on('change:selected', this._changeSelectedHandler);
        return this.updateSelected();
      };

      SlideView.prototype.updateSelected = function() {
        var fn;

        fn = this.viewState.get('selected') ? 'addClass' : 'removeClass';
        return this.$el[fn]('selected');
      };

      SlideView.prototype.setSize = function(width, height) {
        return this.$el.css({
          width: "" + width + "px",
          height: "" + height + "px"
        });
      };

      SlideView.prototype._changeSelectedHandler = function() {
        return this.updateSelected();
      };

      return SlideView;

    })(Backbone.View);
    PhotoSlideView = (function(_super) {
      __extends(PhotoSlideView, _super);

      function PhotoSlideView() {
        _ref4 = PhotoSlideView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      PhotoSlideView.prototype.render = function() {
        this.$el.html("<img src=\"" + (this.model.get('src')) + "\"  width=\"" + (this.model.get('width')) + "\" height=\"" + (this.model.get('height')) + "\" />");
        return this;
      };

      PhotoSlideView.prototype.setSize = function(width, height) {
        return this.$el.add(this.$el.find('img')).css({
          width: "" + width + "px",
          height: "" + height + "px",
          maxWidth: 'none',
          minWidth: 'none',
          maxHeight: 'none',
          minHeight: 'none'
        });
      };

      return PhotoSlideView;

    })(SlideView);
    HtmlSlideView = (function(_super) {
      __extends(HtmlSlideView, _super);

      function HtmlSlideView() {
        _ref5 = HtmlSlideView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      HtmlSlideView.prototype.render = function() {
        return this.$el.html(this.model.get('html'));
      };

      return HtmlSlideView;

    })(SlideView);
    return {
      Gallery: GalleryModel,
      ViewState: ViewState,
      SlideView: SlideView,
      PhotoSlideView: PhotoSlideView,
      HtmlSlideView: HtmlSlideView
    };
  });

}).call(this);
