// Generated by CoffeeScript 1.6.2
(function() {
  var define, require,
    _this = this,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require = this.require;

  define = this.define;

  if (!(define != null ? define.amd : void 0)) {
    define = function() {
      var args, fn, _i, _ref;

      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
      return ((_ref = _this.gallerista) != null ? _ref : _this.gallerista = {}).transitions = fn(function() {});
    };
  }

  define(function(require) {
    var CrossFade, Fade, Transition, _ref, _ref1;

    Transition = (function() {
      function Transition(defaults) {
        this.defaults = defaults;
      }

      Transition.prototype.from = function(slide) {
        this.slide = slide;
      };

      Transition.prototype.to = function(toSlide, options) {
        var _ref,
          _this = this;

        if (((_ref = this._deferred) != null ? _ref.state() : void 0) !== 'pending') {
          this.fromSlide = this.slide || this.toSlide;
          this.toSlide = toSlide;
          this.options = _.extend(this.defaults || {}, options);
          this._deferred = $.Deferred();
          $.when(this.start(), this.execute()).done(function() {
            return _this._deferred.resolve();
          });
          return this._deferred.promise().done(function() {
            return $.when(_this.done());
          });
        } else {
          return $.when(this.cancel()).then(function() {
            _this._deferred.resolve();
            return _this.to(toSlide, options);
          });
        }
      };

      Transition.prototype.start = function() {
        return $(this.toSlide).appendTo(this.options.container);
      };

      Transition.prototype.done = function() {
        return $(this.fromSlide).remove();
      };

      Transition.prototype.execute = function() {};

      Transition.prototype.cancel = function() {};

      return Transition;

    })();
    CrossFade = (function(_super) {
      __extends(CrossFade, _super);

      function CrossFade() {
        _ref = CrossFade.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      CrossFade.prototype.execute = function() {
        var d, _ref1, _ref2;

        d = ((_ref1 = this.options) != null ? _ref1.animate : void 0) === false ? 0 : ((_ref2 = this.options) != null ? _ref2.duration : void 0) || 500;
        return $(this.toSlide).stop(true).show().css({
          opacity: 0
        }).animate({
          opacity: 1
        }, d);
      };

      CrossFade.prototype.cancel = function() {
        return $(this.toSlide).stop(true);
      };

      return CrossFade;

    })(Transition);
    Fade = (function(_super) {
      __extends(Fade, _super);

      function Fade() {
        _ref1 = Fade.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Fade.prototype.execute = function() {
        var d, _ref2, _ref3;

        d = ((_ref2 = this.options) != null ? _ref2.animate : void 0) === false ? 0 : ((_ref3 = this.options) != null ? _ref3.duration : void 0) || 500;
        $(this.fromSlide).animate({
          'opacity': 0
        }, d);
        return $(this.toSlide).css({
          'opacity': 0
        }).delay(d).animate({
          'opacity': 1
        }, d);
      };

      Fade.prototype.cancel = function() {
        $(this.toSlide).stop(true);
        return $(this.fromSlide).stop(true);
      };

      return Fade;

    })(Transition);
    return {
      Transition: Transition,
      CrossFade: CrossFade,
      Fade: Fade
    };
  });

}).call(this);