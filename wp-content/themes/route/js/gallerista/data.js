// Generated by CoffeeScript 1.6.2
(function() {
  var define, require,
    _this = this,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  require = this.require;

  define = this.define;

  if (!(define != null ? define.amd : void 0)) {
    define = function() {
      var args, fn, _i, _ref;

      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
      return ((_ref = _this.gallerista) != null ? _ref : _this.gallerista = {}).data = fn(function() {});
    };
  }

  define(function(require) {
    var SlideData, SlideDataFactory, SlideDataPool;

    SlideData = (function() {
      function SlideData(opts) {
        this.view = opts.view;
        this.model = opts.model;
        this.viewState = opts.viewState;
        this.transition = opts.transition;
      }

      SlideData.prototype.invalidatePosition = function(opts) {
        if ((opts != null ? opts.x : void 0) !== false) {
          delete this.calculatedX;
          delete this.x;
        }
        if ((opts != null ? opts.y : void 0) !== false) {
          delete this.calculatedY;
          return delete this.y;
        }
      };

      SlideData.prototype.invalidateSize = function() {
        return delete this.size;
      };

      return SlideData;

    })();
    SlideDataFactory = (function() {
      function SlideDataFactory(options) {
        this.options = options;
        if (!this.options.viewState) {
          throw new Error('A viewState is required.');
        }
        if (!this.options.slideView) {
          throw new Error('A slideView is required.');
        }
      }

      SlideDataFactory.prototype.create = function(model, opts) {
        var data, el, transition, view, viewState;

        el = opts != null ? opts.el : void 0;
        viewState = new this.options.viewState;
        view = new this.options.slideView({
          el: el,
          model: model,
          viewState: viewState
        });
        if (transition = opts != null ? opts.transition : void 0) {
          transition.from(view.$el);
        }
        data = new SlideData({
          view: view,
          viewState: viewState,
          model: model,
          transition: transition
        });
        if (!el) {
          data.view.render();
        }
        data.view.$el.css({
          position: 'absolute',
          display: 'block'
        });
        return data;
      };

      return SlideDataFactory;

    })();
    SlideDataPool = (function() {
      var _poolSize;

      function SlideDataPool(opts) {
        this.slides = opts.slides;
        this.factory = opts.factory || new SlideDataFactory(opts);
        this.idle = [];
        this.active = [];
      }

      SlideDataPool.prototype.add = function(slideIndex, opts) {
        var data, _base, _ref;

        data = this.factory.create(this.slides.at(slideIndex), opts);
        ((_ref = (_base = this.idle)[slideIndex]) != null ? _ref : _base[slideIndex] = []).push(data);
        return data;
      };

      SlideDataPool.prototype.borrow = function(slideIndex, opts) {
        var data, dataList, _base, _ref;

        if ((dataList = this.idle[slideIndex]) && dataList.length) {
          data = dataList.pop();
          ((_ref = (_base = this.active)[slideIndex]) != null ? _ref : _base[slideIndex] = []).push(data);
          return data;
        } else if (opts != null ? opts.create : void 0) {
          return this.createAndBorrow(slideIndex, opts);
        } else {
          return null;
        }
      };

      SlideDataPool.prototype.createAndBorrow = function(slideIndex, opts) {
        var data, _base, _ref;

        data = this.factory.create(this.slides.at(slideIndex), opts);
        ((_ref = (_base = this.active)[slideIndex]) != null ? _ref : _base[slideIndex] = []).push(data);
        return data;
      };

      SlideDataPool.prototype.clear = function() {
        return this.idle = [];
      };

      SlideDataPool.prototype.close = function() {
        this.idle = [];
        return this.active = [];
      };

      SlideDataPool.prototype.getNumActive = function() {
        return this._poolSize(this.active);
      };

      SlideDataPool.prototype.getNumIdle = function() {
        return this._poolSize(this.idle);
      };

      SlideDataPool.prototype["return"] = function() {
        var obj, objs, slideIndex, _base, _i, _len, _ref, _results;

        objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _results = [];
        for (_i = 0, _len = objs.length; _i < _len; _i++) {
          obj = objs[_i];
          slideIndex = this.slides.indexOf(obj.model);
          _results.push(((_ref = (_base = this.idle)[slideIndex]) != null ? _ref : _base[slideIndex] = []).push(obj));
        }
        return _results;
      };

      _poolSize = function(pool) {
        var arr, k, size;

        size = 0;
        for (k in pool) {
          if (!__hasProp.call(pool, k)) continue;
          arr = pool[k];
          size += arr.length;
        }
        return size;
      };

      return SlideDataPool;

    })();
    return {
      SlideData: SlideData,
      SlideDataFactory: SlideDataFactory,
      SlideDataPool: SlideDataPool
    };
  });

}).call(this);
