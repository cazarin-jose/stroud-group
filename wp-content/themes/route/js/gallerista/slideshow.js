// Generated by CoffeeScript 1.6.2
(function() {
  var define, require,
    _this = this,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require = this.require;

  define = this.define;

  if (!(define != null ? define.amd : void 0)) {
    require = function(mod) {
      return {
        jquery: _this.jQuery,
        underscore: _this._,
        backbone: _this.Backbone,
        'gallerista/core': _this.gallerista.core,
        'gallerista/utils': _this.gallerista.utils,
        'gallerista/data': _this.gallerista.data,
        'gallerista/transitions': _this.gallerista.transitions
      }[mod];
    };
    define = function() {
      var args, fn, _i, _ref;

      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
      return ((_ref = _this.gallerista) != null ? _ref : _this.gallerista = {}).slideshow = fn(require);
    };
  }

  define(function(require) {
    var $, Backbone, CrossFade, Dict, Direction, PhotoSlideView, SlideData, SlideDataPool, Slideshow, Transition, Units, ViewState, determineNearestDirection, galleristaCore, galleristaData, galleristaTransitions, galleristaUtils, mod, _, _ref;

    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    galleristaCore = require('gallerista/core');
    galleristaUtils = require('gallerista/utils');
    galleristaData = require('gallerista/data');
    galleristaTransitions = require('gallerista/transitions');
    mod = galleristaUtils.mod, Dict = galleristaUtils.Dict, Units = galleristaUtils.Units, Direction = galleristaUtils.Direction, determineNearestDirection = galleristaUtils.determineNearestDirection;
    Transition = galleristaTransitions.Transition, CrossFade = galleristaTransitions.CrossFade;
    SlideData = galleristaData.SlideData, SlideDataPool = galleristaData.SlideDataPool;
    ViewState = galleristaCore.ViewState, PhotoSlideView = galleristaCore.PhotoSlideView;
    Slideshow = (function(_super) {
      __extends(Slideshow, _super);

      function Slideshow() {
        _ref = Slideshow.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Slideshow.prototype.defaultOptions = {
        direction: Direction.NEAREST,
        loop: true,
        slideView: PhotoSlideView,
        viewState: ViewState,
        animateInitial: false,
        transition: new CrossFade(),
        slides: '> *'
      };

      Slideshow.prototype.initialize = function() {
        _.defaults(this.options, this.defaultOptions);
        _.bindAll(this, '_clickNextHandler', '_clickPreviousHandler', '_changeSelectedSlideHandler');
        this.window = $(window);
        this.slideDataPool = new SlideDataPool({
          slides: this.model.get('slides'),
          viewState: this.options.viewState,
          slideView: this.options.slideView
        });
        this.currentView = null;
        if (!this.options.loop) {
          throw new Error('Non-looping mode is not yet implemented.');
        }
        this.initSlideViews();
        this.model.on('change:selectedSlide', this._changeSelectedSlideHandler);
        if (this.options.nextButton) {
          this.$nextButton = $(this.options.nextButton).on('click', this._clickNextHandler);
        }
        if (this.options.previousButton) {
          this.$previousButton = $(this.options.previousButton).on('click', this._clickPreviousHandler);
        }
        this.updateSelected({
          animate: this.options.animateInitial
        });
        return this.$el.addClass('initialized');
      };

      Slideshow.prototype.initSlideViews = function() {
        var $els;

        $els = this.$el.find(this.options.slides);
        if ($els.length) {
          throw Error('You can\'t have slides in the DOM until I write the code that lets you.');
        }
      };

      Slideshow.prototype.getTransition = function(slideData) {
        return (slideData != null ? slideData.transition : void 0) || this.options.transition;
      };

      Slideshow.prototype.gotoNext = function() {
        return this.model.gotoNext(this.options.loop);
      };

      Slideshow.prototype.gotoPrevious = function() {
        return this.model.gotoPrevious(this.options.loop);
      };

      Slideshow.prototype.updateSelected = function(opts) {
        var animate, direction, modelIndex, newSelectedSlideData, oldSelectedSlideData, previousModelIndex, slideCount, slides, _ref1,
          _this = this;

        previousModelIndex = this._previousModelIndex;
        modelIndex = this.model.get('selectedSlideIndex');
        if (((_ref1 = this.transition) != null ? _ref1.state() : void 0) === 'pending') {
          this.nextUpdate = opts || {};
          return;
        }
        this.nextUpdate = null;
        if (!((opts != null ? opts.force : void 0) || modelIndex !== previousModelIndex)) {
          return;
        }
        animate = (opts != null ? opts.animate : void 0) !== false;
        oldSelectedSlideData = this.currentView;
        slides = this.model.get('slides');
        slideCount = slides.length;
        if (this.options.loop && (this.options.direction === Direction.NEAREST)) {
          direction = determineNearestDirection(previousModelIndex, modelIndex, slideCount);
        } else {
          direction = this.options.direction;
        }
        newSelectedSlideData = this.slideDataPool.borrow(modelIndex, {
          create: true
        });
        if (oldSelectedSlideData != null) {
          oldSelectedSlideData.viewState.set({
            selected: false
          });
        }
        newSelectedSlideData.viewState.set({
          selected: true
        });
        this.currentView = newSelectedSlideData;
        this._previousModelIndex = modelIndex;
        this.transition = this.getTransition(oldSelectedSlideData).to(newSelectedSlideData.view.$el, {
          container: this.$el,
          direction: direction,
          animate: animate
        });
        return this.transition.done(function() {
          if (oldSelectedSlideData) {
            _this.slideDataPool["return"](oldSelectedSlideData);
          }
          if (_this.nextUpdate) {
            return _this.updateSelected(_this.nextUpdate);
          }
        });
      };

      Slideshow.prototype._clickPreviousHandler = function(event) {
        event.preventDefault();
        return this.gotoPrevious();
      };

      Slideshow.prototype._clickNextHandler = function(event) {
        event.preventDefault();
        return this.gotoNext();
      };

      Slideshow.prototype._changeSelectedSlideHandler = function(model, slide, options) {
        return this.updateSelected();
      };

      return Slideshow;

    })(Backbone.View);
    return _.extend({
      Slideshow: Slideshow,
      Transition: Transition,
      CrossFade: CrossFade,
      utils: galleristaUtils
    }, galleristaCore);
  });

}).call(this);
